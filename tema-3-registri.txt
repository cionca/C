void init_PWM_timer1() {

  TCCR1A = 0;
  TCCR1B = 0;
  TCCR1B = (1 << CS10);                           // FARA DIVIZOR DE FRECVENTA

}



void init_com_seriala()
{
  //initializare registrii comunicatie seriala

  UBRR0H = 0x00;           //se seteaza baud pe 9600
  UBRR0L = 0x67;


  UCSR0B |= (1 << TXEN0) | (1 << RXEN0); // activam transmiterea seriala(TX), activam receptia seriala(RX)
  UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); //selectam transmiterea de date pe 8 biti

}
void setup() {
  cli(); //dezactivam tratarea intreruperilor
  init_PWM_timer1();
  init_com_seriala();
  DDRB |= 0x01;

  sei();  //activam tratarea intreruperilor
}
int afisare(float a)
{
  int total;
  int mare;
  int zeci;
  int unitati;
  int zecimi;
  total = a * 10;
  zeci = total / 100;
  unitati = (total / 10) % 10;
  zecimi = (total % 100) % 10;

  while (UCSR0A == 0 << UDRE0);//asteptam pana se termina transmisia
  UDR0 =  48 + zeci;//transmitem codul ascii 48 este 0 in ascii
  while (UCSR0A == 0 << UDRE0);//asteptam pana se termina transmisia
  UDR0 =  48 + unitati;
  while (UCSR0A == 0 << UDRE0);//asteptam pana se termina transmisia
  UDR0 = 44;
  while (UCSR0A == 0 << UDRE0);//asteptam pana se termina transmisia
  UDR0 =  48 + zecimi;
  while (UCSR0A == 0 << UDRE0);//asteptam pana se termina transmisia
  UDR0 = 0x0A; // codul pentru a trece pe linia urmatoare
}
float sonar(void) {
  float timp, dist;
  int c = 0;                                        // CONTOR OVERFLOW

  TCNT1 = 0;
  PORTB &= ~0x01;
  while (TCNT1 <= 160)                              // 160 < = > 10 microsecunde
    TCNT1++;
  PORTB |= 0x01;//trimitem undele
  TCNT1 = 0;
  while (TCNT1 <= 160)  // 160 < = > 10 microsecunde
    TCNT1++;
  PORTB &= ~0x01;//oprim trimiterea undelor
  TCNT1 = 0;
  while (PINB & 0x02) {//asteptam sa vina ecoul
    TCNT1++;
    if (TCNT1 == 65535) {
      c++;
      TCNT1 = 0;
    }
  }

  timp = ((c * 65535) + TCNT1) * 0.125;//formula de calcul
  dist = timp / 58;


  return dist;

}




void loop() {

  float distanta;
  

  distanta = sonar();

  if (distanta > 1.00)
  {
    afisare(distanta);
  }




}